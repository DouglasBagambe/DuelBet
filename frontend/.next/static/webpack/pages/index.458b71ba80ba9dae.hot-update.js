"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/useChallenge.ts":
/*!*******************************!*\
  !*** ./hooks/useChallenge.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChallenge: () => (/* binding */ useChallenge)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"../node_modules/@solana/wallet-adapter-react/lib/esm/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"../node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _useProgram__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useProgram */ \"./hooks/useProgram.ts\");\n// frontend/components/hooks/useChallenge.ts\n // Add useEffect\n\n\n\nconst useChallenge = ()=>{\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    const { program } = (0,_useProgram__WEBPACK_IMPORTED_MODULE_2__.useProgram)();\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [challengeStatus, setChallengeStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"idle\");\n    const [challengeAccount, setChallengeAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    // const [challenges, setChallenges] = useState<Challenge[]>([]);\n    const [lastFetch, setLastFetch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // At the top of useChallenge.ts\n    const getStoredChallenges = ()=>{\n        const stored = localStorage.getItem(\"challenges\");\n        return stored ? JSON.parse(stored) : [];\n    };\n    const [challenges, setChallenges] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getStoredChallenges());\n    const createChallenge = async (param)=>{\n        let { wagerAmount, lichessUsername } = param;\n        if (!wallet.connected || !program) {\n            setError(\"Wallet not connected\");\n            return null;\n        }\n        try {\n            setLoading(true);\n            setError(null);\n            setChallengeStatus(\"creating\");\n            const challengeKeypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.unique();\n            const statsHash = new Uint8Array(32).fill(1);\n            const lamports = Math.round(wagerAmount * 1e9);\n            const createChallengeIx = await program.methods.createChallenge(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(lamports.toString()), statsHash).accounts({\n                challenge: challengeKeypair,\n                creator: wallet.publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId\n            }).instruction();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction().add(createChallengeIx);\n            const signature = await wallet.sendTransaction(transaction, program.provider.connection);\n            await program.provider.connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Transaction signature:\", signature);\n            const newChallenge = {\n                id: challengeKeypair.toString(),\n                creator: wallet.publicKey.toString(),\n                lichessUsername,\n                wagerAmount,\n                isComplete: false,\n                stats: {\n                    matchId: \"\",\n                    playerStats: {\n                        result: \"draw\",\n                        variant: \"Standard\",\n                        speed: \"Unknown\"\n                    }\n                }\n            };\n            setChallenges((prev)=>{\n                const updatedChallenges = [\n                    ...prev,\n                    newChallenge\n                ];\n                console.log(\"Challenges updated in createChallenge:\", updatedChallenges); // New debug log\n                localStorage.setItem(\"challenges\", JSON.stringify(updatedChallenges)); // Ensure persistence\n                return updatedChallenges;\n            });\n            setChallengeStatus(\"active\");\n            setChallengeAccount(challengeKeypair.toString());\n            await getChallenges(); // Try to fetch updated list\n            return challengeKeypair.toString();\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : \"Failed to create challenge\";\n            console.error(\"Create challenge error:\", errorMessage);\n            setError(errorMessage);\n            setChallengeStatus(\"idle\");\n            return null;\n        } finally{\n            setLoading(false);\n        }\n    };\n    const getChallenges = async ()=>{\n        if (!wallet.connected || !program) {\n            setError(\"Wallet not connected\");\n            return [];\n        }\n        const now = Date.now();\n        if (now - lastFetch < 10000) {\n            console.log(\"Rate limit hit, skipping fetch\");\n            return challenges;\n        }\n        try {\n            setLoading(true);\n            const filters = [\n                {\n                    memcmp: {\n                        offset: 8,\n                        bytes: wallet.publicKey.toString()\n                    }\n                }\n            ];\n            console.log(\"Attempting to fetch challenges with filters:\", filters); // Debug\n            const allChallenges = await program.account.challenge.all(filters);\n            const challengeList = allChallenges.map((account)=>({\n                    id: account.publicKey.toString(),\n                    creator: account.account.creator.toString(),\n                    lichessUsername: account.account.lichessUsername || \"\",\n                    wagerAmount: account.account.wagerAmount.toNumber() / 1e9,\n                    isComplete: account.account.isComplete || false,\n                    stats: account.account.stats || {\n                        matchId: \"\",\n                        playerStats: {\n                            result: \"draw\",\n                            variant: \"Standard\",\n                            speed: \"Unknown\"\n                        }\n                    }\n                }));\n            setChallenges(challengeList);\n            localStorage.setItem(\"challenges\", JSON.stringify(challengeList));\n            setLastFetch(now);\n            console.log(\"Successfully fetched challenges:\", challengeList);\n            return challengeList;\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : \"Failed to fetch challenges\";\n            if (errorMessage.includes(\"429\")) {\n                console.warn(\"Rate limit hit, retrying after delay...\", errorMessage);\n                await new Promise((resolve)=>setTimeout(resolve, 5000));\n                return getChallenges();\n            }\n            console.error(\"Fetch failed, falling back to localStorage:\", errorMessage);\n            const storedChallenges = getStoredChallenges();\n            setChallenges(storedChallenges);\n            console.log(\"Fallback challenges from localStorage:\", storedChallenges);\n            return storedChallenges;\n        } finally{\n            setLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChallenge.useEffect\": ()=>{\n            if (wallet.connected) getChallenges();\n        }\n    }[\"useChallenge.useEffect\"], [\n        wallet.connected\n    ]);\n    const acceptChallenge = async (param)=>{\n        let { challengeId, wagerAmount, lichessUsername } = param;\n        if (!wallet.connected || !program) {\n            setError(\"Wallet not connected\");\n            return false;\n        }\n        try {\n            setLoading(true);\n            setError(null);\n            const acceptChallengeIx = await program.methods.acceptChallenge().accounts({\n                challenge: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(challengeId),\n                challenger: wallet.publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId\n            }).instruction();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction().add(acceptChallengeIx);\n            const signature = await wallet.sendTransaction(transaction, program.provider.connection);\n            await program.provider.connection.confirmTransaction(signature);\n            setChallengeStatus(\"accepted\");\n            return true;\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"Failed to accept challenge\");\n            return false;\n        } finally{\n            setLoading(false);\n        }\n    };\n    const completeChallenge = async (param)=>{\n        let { challengeId, winner, stats } = param;\n        if (!wallet.connected || !program) {\n            setError(\"Wallet not connected\");\n            return false;\n        }\n        try {\n            setLoading(true);\n            setError(null);\n            const zkProof = new Uint8Array(32).fill(0); // Placeholder for Lichess ZK proof (e.g., game result verification)\n            const completeChallengeIx = await program.methods.completeChallenge(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(winner), zkProof).accounts({\n                challenge: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(challengeId),\n                creator: wallet.publicKey,\n                challenger: wallet.publicKey\n            }).instruction();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction().add(completeChallengeIx);\n            const signature = await wallet.sendTransaction(transaction, program.provider.connection);\n            await program.provider.connection.confirmTransaction(signature);\n            setChallengeStatus(\"completed\");\n            return true;\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"Failed to complete challenge\");\n            return false;\n        } finally{\n            setLoading(false);\n        }\n    };\n    return {\n        createChallenge,\n        acceptChallenge,\n        completeChallenge,\n        getChallenges,\n        loading,\n        error,\n        challengeStatus,\n        challengeAccount\n    };\n};\nfunction setLastFetch(now) {\n    throw new Error(\"Function not implemented.\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useChallenge.ts\n"));

/***/ })

});